package main;

import test.Test;

import java.io.IOException;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 * @author ChathuraDR
 */
public class Main extends javax.swing.JFrame {

    Test th = new Test();
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnInsert = new javax.swing.JButton();
        JScrollPane jScrollPane1 = new JScrollPane();
        plainTextField = new javax.swing.JTextArea();
        JScrollPane jScrollPane2 = new JScrollPane();
        ciphertextField = new javax.swing.JTextArea();
        btnDecrypt = new javax.swing.JButton();
        key = new javax.swing.JPasswordField();
        keyConfirm = new javax.swing.JPasswordField();
        JLabel jLabel1 = new JLabel();
        JLabel jLabel2 = new JLabel();
        btnInsert1 = new javax.swing.JButton();
        key1 = new javax.swing.JPasswordField();
        JLabel jLabel3 = new JLabel();
        btnEncrypt = new javax.swing.JButton();
        JButton jButton1 = new JButton();
        JButton btnSaveCipher = new JButton();
        JLabel jLabel4 = new JLabel();
        JLabel jLabel5 = new JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("3DES Encryption/Decryption Application");
        setMinimumSize(new java.awt.Dimension(1090, 450));
        setPreferredSize(new java.awt.Dimension(1090, 450));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnInsert.setText("Insert File to Encrypt");
        btnInsert.addActionListener(evt -> btnInsertActionPerformed());
        getContentPane().add(btnInsert, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, -1, -1));

        plainTextField.setColumns(20);
        plainTextField.setRows(5);
        plainTextField.setToolTipText("Enter the text or select a file to read text that you want to Encrypt");
        plainTextField.addPropertyChangeListener(evt -> plainTextFieldPropertyChange());
        jScrollPane1.setViewportView(plainTextField);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, 410, 140));

        ciphertextField.setColumns(20);
        ciphertextField.setRows(5);
        ciphertextField.setToolTipText("Enter the Cipher text or select a file to read text that you want to Decrypt");
        jScrollPane2.setViewportView(ciphertextField);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 180, 410, 140));

        btnDecrypt.setText("<= Decrypt");
        btnDecrypt.addActionListener(evt -> btnDecryptActionPerformed());
        getContentPane().add(btnDecrypt, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 240, -1, -1));

        key.setToolTipText("Enter a Key to Encrypt");
        key.addActionListener(evt -> keyActionPerformed());
        getContentPane().add(key, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 50, 260, 30));

        keyConfirm.setToolTipText("Reenter your password");
        getContentPane().add(keyConfirm, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 100, 260, 30));

        jLabel1.setText("Enter key to Encrypt");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, -1));

        jLabel2.setText("Confirm key");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, -1, -1));

        btnInsert1.setText("Insert File to Decrypt");
        btnInsert1.addActionListener(evt -> btnInsert1ActionPerformed());
        getContentPane().add(btnInsert1, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 140, -1, -1));

        key1.setToolTipText("Enter a Key to Decrypt");
        key1.addActionListener(evt -> key1ActionPerformed());
        getContentPane().add(key1, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 50, 260, 30));

        jLabel3.setText("Enter key to Decrypt");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 60, -1, -1));

        btnEncrypt.setText("Encrypt  =>");
        btnEncrypt.addActionListener(evt -> btnEncryptActionPerformed());
        getContentPane().add(btnEncrypt, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 190, -1, -1));

        jButton1.setText("Refresh Fields");
        jButton1.addActionListener(evt -> jButton1ActionPerformed());
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 290, 110, -1));

        btnSaveCipher.setText("Save");
        btnSaveCipher.addActionListener(evt -> btnSaveCipherActionPerformed());
        getContentPane().add(btnSaveCipher, new org.netbeans.lib.awtextra.AbsoluteConstraints(907, 350, 140, -1));

        jLabel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Decryption"));
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 20, 430, 380));

        jLabel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Encryption"));
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 430, 380));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnInsertActionPerformed() {//GEN-FIRST:event_btnInsertActionPerformed
        JFileChooser fc = new JFileChooser();  //Create a file chooser
        FileFilter filter = new FileNameExtensionFilter("Text Files", "txt", "text");  //create a filter to accept only text files
        fc.setFileFilter(filter);   //set the filter to the file chooser.
        int response = fc.showOpenDialog(null);   //In response to a button click
        plainTextField.setText(null);
        if (response == JFileChooser.APPROVE_OPTION) {
            // if user clicks "Ok" then get the absolute path of the file,the textField that we want to set the text and pass it to the function from "testFileHandler.java"
            th.readFile(fc.getSelectedFile().getAbsolutePath(), plainTextField);

        } else {
            //if user select nothing,then alret him
            JOptionPane.showMessageDialog(this, "You didn't select a file.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnInsertActionPerformed

    private void btnDecryptActionPerformed() {//GEN-FIRST:event_btnDecryptActionPerformed
        if (key1.getPassword().length == 0) {
            //check whether user entered the key to decrypt the given text.
            JOptionPane.showMessageDialog(this, "Please Enter a Key to do Decryption.", "Warning", JOptionPane.WARNING_MESSAGE);

        } else if (ciphertextField.getText().equals("")) {
            //check whether the cyper text field empty or not.
            JOptionPane.showMessageDialog(this, "You didn't Enter Text to Decrypt", "Warning", JOptionPane.WARNING_MESSAGE);

        } else {
            //if only those filed aren't empty then get the key as a sting and pass it to the decrypt function with the variable name of the text field that we want to set the decrypted text to.
            String s = new String(key1.getPassword());
            try {
                th.decrypt(ciphertextField.getText(), s, plainTextField);
            } catch (Exception ex) {
                plainTextField.setText("0b091c8724f302ab49763034ba157450");  //if the key wrong then set some garbage value.in here i harcoded them.but we can generate that garbage value.

            }

            key1.setEnabled(false);
            btnInsert1.setEnabled(false);
            ciphertextField.setText(null);
            btnDecrypt.setEnabled(false);
        }
    }//GEN-LAST:event_btnDecryptActionPerformed

    private void plainTextFieldPropertyChange() {//GEN-FIRST:event_plainTextFieldPropertyChange

    }//GEN-LAST:event_plainTextFieldPropertyChange

    private void keyActionPerformed() {//GEN-FIRST:event_keyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_keyActionPerformed

    private void btnInsert1ActionPerformed() {//GEN-FIRST:event_btnInsert1ActionPerformed
        //code is same as other button
        JFileChooser fc = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Text Files", "txt", "text");
        fc.setFileFilter(filter);
        int response = fc.showOpenDialog(null);
        ciphertextField.setText(null);
        if (response == JFileChooser.APPROVE_OPTION) {
            th.readFile(fc.getSelectedFile().getAbsolutePath(), ciphertextField);

        } else {
            JOptionPane.showMessageDialog(this, "You didn't select a file.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnInsert1ActionPerformed

    private void key1ActionPerformed() {//GEN-FIRST:event_key1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_key1ActionPerformed

    private void btnEncryptActionPerformed() {//GEN-FIRST:event_btnEncryptActionPerformed
        if (key.getPassword().length == 0 || keyConfirm.getPassword().length == 0) {
            //check whether the both of password & confirm password fileds are empty or not
            JOptionPane.showMessageDialog(this, "Please Enter a Key to do Encryption and Confirm that key.", "Warning", JOptionPane.WARNING_MESSAGE);

        } else if (!(Arrays.equals(key.getPassword(), keyConfirm.getPassword()))) {
            //if those fields aren't empty then check whether those passwords are match.
            JOptionPane.showMessageDialog(this, "Passwords doesn't match.", "Warning", JOptionPane.WARNING_MESSAGE);

        } else if (plainTextField.getText().equals("")) {
            //if password fields ok then check the texFields if there's any text.if nothing to encrypt,then tell it to the user.
            JOptionPane.showMessageDialog(this, "You didn't Enter Text to Encrypt", "Warning", JOptionPane.WARNING_MESSAGE);

        } else {
            //get password field text as string.becaue ecrypt function accepts string parameters only.
            String s = new String(key.getPassword());
            try {
                th.encrypt(plainTextField.getText(), s, ciphertextField);  //pass to the encrypt function to encrypt.
            } catch (Exception e) {
                System.err.println(e);
            }
            // after all of that then do these things.
            key.setEnabled(false);
            keyConfirm.setEnabled(false);
            btnInsert.setEnabled(false);
            plainTextField.setText(null);
            btnEncrypt.setEnabled(false);
        }
    }//GEN-LAST:event_btnEncryptActionPerformed

    private void jButton1ActionPerformed() {//GEN-FIRST:event_jButton1ActionPerformed
        key.setEnabled(true);
        key.setText(null);
        keyConfirm.setEnabled(true);
        keyConfirm.setText(null);
        btnInsert.setEnabled(true);
        plainTextField.setText(null);
        btnEncrypt.setEnabled(true);
        key1.setEnabled(true);
        key.setText(null);
        btnInsert1.setEnabled(true);
        ciphertextField.setText(null);
        btnDecrypt.setEnabled(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnSaveCipherActionPerformed() {//GEN-FIRST:event_btnSaveCipherActionPerformed
        //same as the code inside insert file button action performed event except insted of reading from a file that we selected, here we write the cypher to the file that we want.

        if (ciphertextField.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Text Area is Empty.nothing to save.", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            JFileChooser fc = new JFileChooser();
            FileFilter filter = new FileNameExtensionFilter("Text Files", "txt", "text");
            fc.setFileFilter(filter);
            fc.setDialogTitle("Save"); //set jfilechooser title
            fc.setApproveButtonText("Save");  //set jfilechooser button text
            int response = fc.showOpenDialog(null);
            if (response == JFileChooser.APPROVE_OPTION) {
                try {
                    th.writeFile(fc.getSelectedFile().getAbsolutePath(), ciphertextField);
                    JOptionPane.showMessageDialog(this, "File Saved Successfully.");
                    ciphertextField.setText(null);

                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {
                JOptionPane.showMessageDialog(this, "You didn't select a file.", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnSaveCipherActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new Main().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDecrypt;
    private javax.swing.JButton btnEncrypt;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnInsert1;
    private javax.swing.JTextArea ciphertextField;
    private javax.swing.JPasswordField key;
    private javax.swing.JPasswordField key1;
    private javax.swing.JPasswordField keyConfirm;
    private javax.swing.JTextArea plainTextField;
    // End of variables declaration//GEN-END:variables
}
